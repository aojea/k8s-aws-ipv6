---
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC-IPv6-K8S

Resources:
  # VPC-IPv6-K8S
  K8sIPv6Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: K8sIPv6VPC
  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref K8sIPv6Vpc
      AmazonProvidedIpv6CidrBlock: true
  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: K8sIPv6IG
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref K8sIPv6Vpc
      InternetGatewayId: !Ref InternetGateway
  # Routing - public subnets
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref K8sIPv6Vpc
      Tags:
      - Key: Name
        Value: K8sIPv6RT
  PublicSubnetDefaultRoute:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref InternetGateway

  # Public subnet A
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      CidrBlock: 192.168.0.0/24
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt K8sIPv6Vpc.Ipv6CidrBlocks ]]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref K8sIPv6Vpc
      AssignIpv6AddressOnCreation: 'true'
      Tags:
      - Key: Name
        Value: K8sIPv6Subnet
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA

  MasterHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09345f73773a6578b # TODO parameter with full baked image
      SourceDestCheck: false # We need to route pod and services traffic inside the instances
      InstanceType: t2.micro # TODO parameter
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref ClusterSecGroup
      Tags:
      - Key: Name
        Value: master-host
      KeyName: aojeagarcia-key # TODO parameter
      UserData:
        Fn::Base64: |
          #!/bin/bash

          cat <<EOF > /opt/kubeadm.yaml
          ---
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: ClusterConfiguration
          clusterName: ipv6-cluster
          apiServer:
            extraArgs:
              bind-address: "::"
          controllerManager:
            extraArgs:
              configure-cloud-routes: "false"
              bind-address: "::"
          kubernetesVersion: v1.17.3
          networking:
            podSubnet: fd00:10:244::/64
            serviceSubnet: fd00:10:96::/112
          scheduler:
            extraArgs:
              address: "::"
              bind-address: "::1"
          ---
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: InitConfiguration
          metadata:
            name: config
          # we use a well know token for TLS bootstrap
          bootstrapTokens:
          - token: abcdef.0123456789abcdef
          # we use a well know port for making the API server discoverable inside docker network.
          # from the host machine such port will be accessible via a random local port instead.
          localAPIEndpoint:
            advertiseAddress: "::"
            bindPort: 6443
          nodeRegistration:
            kubeletExtraArgs:
              fail-swap-on: "false"
              node-ip: "::"
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          metadata:
            name: config
          # configure ipv6 addresses in IPv6 mode
          address: "::"
          healthzBindAddress: "::"
          # disable disk resource management by default
          # kubelet will see the host disk that the inner container runtime
          # is ultimately backed by and attempt to recover disk space. we don't want that.
          imageGCHighThresholdPercent: 100
          evictionHard:
            nodefs.available: "0%"
            nodefs.inodesFree: "0%"
            imagefs.available: "0%"
          EOF

          /usr/bin/kubeadm init --config /opt/kubeadm.yaml --ignore-preflight-errors=all -v7
          sleep 5
          /usr/bin/kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f /opt/cni/install-kindnet.yaml

  # TODO: autoscaling group
  Worker1Host:
    Type: AWS::EC2::Instance
    DependsOn: MasterHost
    Properties:
      ImageId: ami-09345f73773a6578b # TODO parameter with full baked image
      SourceDestCheck: false # We need to route pod and services traffic inside the instances
      InstanceType: t2.micro # TODO parameter
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref ClusterSecGroup
      Tags:
      - Key: Name
        Value: worker-host
      KeyName: aojeagarcia-key # TODO parameter
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash

              cat <<EOF > /opt/kubeadm.yaml
              kind: JoinConfiguration
              apiVersion: kubeadm.k8s.io/v1beta2
              discovery:
                bootstrapToken:
                  apiServerEndpoint: "${ApiServerIP}:6443"
                  token: abcdef.0123456789abcdef
                  unsafeSkipCAVerification: true
              nodeRegistration:
                criSocket: /run/containerd/containerd.sock
                kubeletExtraArgs:
                  fail-swap-on: "false"
                  node-ip: "::"
              EOF

              /usr/bin/kubeadm join --config /opt/kubeadm.yaml --ignore-preflight-errors=all -v7
            - ApiServerIP: !GetAtt MasterHost.PrivateIp

  Worker2Host:
    Type: AWS::EC2::Instance
    DependsOn: MasterHost
    Properties:
      ImageId: ami-09345f73773a6578b # TODO parameter with full baked image
      SourceDestCheck: false # We need to route pod and services traffic inside the instances
      InstanceType: t2.micro # TODO parameter
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref ClusterSecGroup
      Tags:
      - Key: Name
        Value: worker-host
      KeyName: aojeagarcia-key # TODO parameter
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash

              cat <<EOF > /opt/kubeadm.yaml
              kind: JoinConfiguration
              apiVersion: kubeadm.k8s.io/v1beta2
              discovery:
                bootstrapToken:
                  apiServerEndpoint: "${ApiServerIP}:6443"
                  token: abcdef.0123456789abcdef
                  unsafeSkipCAVerification: true
              nodeRegistration:
                criSocket: /run/containerd/containerd.sock
                kubeletExtraArgs:
                  fail-swap-on: "false"
                  node-ip: "::"
              EOF

              /usr/bin/kubeadm join --config /opt/kubeadm.yaml --ignore-preflight-errors=all -v7
            - ApiServerIP: !GetAtt MasterHost.PrivateIp

  # Define the (one) security group for all machines in the cluster.  Keeping
  # just one security group helps with k8s's cloud-provider=aws integration so
  # that it knows what security group to manage.
  ClusterSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all machines in the cluster
      VpcId: !Ref K8sIPv6Vpc
      # Security Groups must be tagged with KubernetesCluster=<cluster> so that
      # they can coexist in the same VPC
      Tags:
      - Key: Name
        Value: k8s-cluster-security-group

  # Permissions we add to the main security group:
  # - Ensure cluster machines can talk to one another
  ClusterSecGroupCrossTalk:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecGroup
      SourceSecurityGroupId: !Ref ClusterSecGroup
      IpProtocol: '-1'
      FromPort: '0'
      ToPort: '65535'

  # - Open up port 22 for SSH into each machine
  # The allowed locations are chosen by the user in the SSHLocation parameter
  ClusterSecGroupAllow22:
    Metadata:
      Comment: Open up port 22 for SSH into each machine
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIpv6: '::/0'

  # Allow the apiserver load balancer to talk to the cluster on port 6443
  ClusterSecGroupAllow6443:
    Metadata:
      Comment: Open up port 6443 for load balancing the API server
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecGroup
      IpProtocol: tcp
      FromPort: '6443'
      ToPort: '6443'
      CidrIpv6: '::/0'
